<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>compare with Li.C et al.2023</title>
    <url>/2023/07/26/compare-with-Li-C-et-al-2023/</url>
    <content><![CDATA[<p>the repetition work of the <a href="https://arxiv.org/abs/2303.06393">Li.C et al.2023</a></p>
<span id="more"></span>

<h1 id="Observation-part"><a href="#Observation-part" class="headerlink" title="Observation part"></a>Observation part</h1><h2 id="The-Gaia-DR3-sample"><a href="#The-Gaia-DR3-sample" class="headerlink" title="The Gaia DR3 sample"></a>The Gaia DR3 sample</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT source_id, radial_velocity, radial_velocity_error, ra, ra_error, dec, dec_error, parallax, parallax_error, pmra, pmra_error, pmdec, pmdec_error</span><br><span class="line"></span><br><span class="line">FROM gaiadr3.gaia_source</span><br><span class="line"></span><br><span class="line">WHERE radial_velocity IS NOT Null AND parallax_over_error&gt;5. AND parallax &gt; 0.001</span><br></pre></td></tr></table></figure>

<p>the x-y plane and x-z plane</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202307261546892.png"/>


<h2 id="the-phase-space"><a href="#the-phase-space" class="headerlink" title="the phase space"></a>the phase space</h2><p>in different $J_{\phi}$ , the phase space:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202307261623128.png"/>

<p>if color code by the $v_{r}$:<br><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202307261630694.png"/></p>
<p>and We should also focus on the $\Omega_{z}-\theta_{z}$ space:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202307261642999.png"/>


<p>the observation part is similar to the paper.</p>
<h1 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h1><h2 id="Chiba-potential-with-spiral"><a href="#Chiba-potential-with-spiral" class="headerlink" title="Chiba potential with spiral"></a>Chiba potential with spiral</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/21h03min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_21h03min.gif"/></div></div></div>

<h2 id="Sormani-potential-with-spiral"><a href="#Sormani-potential-with-spiral" class="headerlink" title="Sormani potential with spiral"></a>Sormani potential with spiral</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://media.githubusercontent.com/media/JunxianLin/markdownimage/master/13h40min_zoom.gif"/></div><div class="group-picture-column"><img src="https://media.githubusercontent.com/media/JunxianLin/markdownimage/master/vr_13h40min_zoom.gif"/></div></div></div>]]></content>
      <tags>
        <tag>science report</tag>
      </tags>
  </entry>
  <entry>
    <title>double arm phase spiral simulation-bar potential</title>
    <url>/2023/06/27/double-arm-phase-spiral-simulation-bar-potential/</url>
    <content><![CDATA[<p>We use the bar potential follow the <a href="https://arxiv.org/pdf/2204.13114.pdf">Sormani et al.(2022)</a>, and trying to figure out what kind of perturbation in bar will produce the doubled-arm spiral in the $z-v_{z}$ phase space. the main parameters I change is the scale of the potential which means the mass of the bar and the pattern speed, in this case I simulated the arisen of the bar, and the doubled-arm spiral will be show up if the time to produce the bar is fast. but in the pattern speed case, I can not reproduce the results of the <a href="https://arxiv.org/pdf/2303.06393.pdf">Li.C et al.(2023)</a>, which is strange for me. </p>
<span id="more"></span>

<h1 id="The-Potential-of-the-bar"><a href="#The-Potential-of-the-bar" class="headerlink" title="The Potential of the bar"></a>The Potential of the bar</h1><p>in this section we will briefly introduce the potential of the bar and we will show how to use AGAMA to quantify it.</p>
<h2 id="The-briefly-description-of-the-bar-potential"><a href="#The-briefly-description-of-the-bar-potential" class="headerlink" title="The briefly description of the bar potential"></a>The briefly description of the bar potential</h2><p>the potential is made of four component:</p>
<p>$$<br>    \rho &#x3D; \rho_{bar,1} + \rho_{bar,2} + \rho_{bar,3} + \rho_{disc}<br>$$</p>
<p>the formula of the $\rho$ can be checked in the <a href="https://arxiv.org/pdf/2204.13114.pdf">Sormani et al.(2022)</a>.</p>
<p>the $\rho_{bar,1}$ and $\rho_{bar,2}$ is the center of the bar like a bulge but in a peanut shape. and the $\rho_{bar,3}$ is the long bar part, just like a ear to the bar, and the last one is the disc part. Here shows the picture for those components.</p>
<p><img src="https://s2.loli.net/2023/06/28/5I6cqf2kmndpTwg.png" alt="the main four component of the potential"></p>
<h2 id="The-code-of-the-bar-potential"><a href="#The-code-of-the-bar-potential" class="headerlink" title="The code of the bar potential"></a>The code of the bar potential</h2><p>We use AGAMA to complete the simulation, the following code is the part of the code in example in the <a href="https://github.com/GalacticDynamics-Oxford/Agama">AGAMA</a>.</p>
<p>We firstly define the density of those four component</p>
<p>The $\rho_{disc}$ component:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeDisk</span>(<span class="params">**params</span>):</span><br><span class="line">    surfaceDensity      = params[<span class="string">&#x27;surfaceDensity&#x27;</span>]</span><br><span class="line">    scaleRadius         = params[<span class="string">&#x27;scaleRadius&#x27;</span>]</span><br><span class="line">    scaleHeight         = params[<span class="string">&#x27;scaleHeight&#x27;</span>]</span><br><span class="line">    innerCutoffRadius   = params[<span class="string">&#x27;innerCutoffRadius&#x27;</span>]</span><br><span class="line">    sersicIndex         = params[<span class="string">&#x27;sersicIndex&#x27;</span>]</span><br><span class="line">    verticalSersicIndex = params[<span class="string">&#x27;verticalSersicIndex&#x27;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">density</span>(<span class="params">xyz</span>):</span><br><span class="line">        R = (xyz[:,<span class="number">0</span>]**<span class="number">2</span> + xyz[:,<span class="number">1</span>]**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">        <span class="keyword">return</span> (surfaceDensity / (<span class="number">4</span>*scaleHeight) *</span><br><span class="line">            numpy.exp( - (R/scaleRadius)**sersicIndex - innerCutoffRadius/(R+<span class="number">1e-100</span>)) /</span><br><span class="line">            numpy.cosh( (<span class="built_in">abs</span>(xyz[:,<span class="number">2</span>]) / scaleHeight)**verticalSersicIndex ) )</span><br><span class="line">    <span class="keyword">return</span> agama.Density(density)</span><br></pre></td></tr></table></figure>

<p>the $\rho_{bar,1}$ component:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeXBar</span>(<span class="params">**params</span>):</span><br><span class="line">    densityNorm = params[<span class="string">&#x27;densityNorm&#x27;</span>]</span><br><span class="line">    x0   = params[<span class="string">&#x27;x0&#x27;</span>]</span><br><span class="line">    y0   = params[<span class="string">&#x27;y0&#x27;</span>]</span><br><span class="line">    z0   = params[<span class="string">&#x27;z0&#x27;</span>]</span><br><span class="line">    xc   = params[<span class="string">&#x27;xc&#x27;</span>]</span><br><span class="line">    yc   = params[<span class="string">&#x27;yc&#x27;</span>]</span><br><span class="line">    c    = params[<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    alpha= params[<span class="string">&#x27;alpha&#x27;</span>]</span><br><span class="line">    cpar = params[<span class="string">&#x27;cpar&#x27;</span>]</span><br><span class="line">    cperp= params[<span class="string">&#x27;cperp&#x27;</span>]</span><br><span class="line">    m    = params[<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">    n    = params[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">    outerCutoffRadius = params[<span class="string">&#x27;outerCutoffRadius&#x27;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">density</span>(<span class="params">xyz</span>):</span><br><span class="line">        r  = numpy.<span class="built_in">sum</span>(xyz**<span class="number">2</span>, axis=<span class="number">1</span>)**<span class="number">0.5</span></span><br><span class="line">        a  = ( ( (<span class="built_in">abs</span>(xyz[:,<span class="number">0</span>]) / x0)**cperp + (<span class="built_in">abs</span>(xyz[:,<span class="number">1</span>]) / y0)**cperp )**(cpar/cperp) +</span><br><span class="line">            (<span class="built_in">abs</span>(xyz[:,<span class="number">2</span>]) / z0)**cpar )**(<span class="number">1</span>/cpar)</span><br><span class="line">        ap = ( ((xyz[:,<span class="number">0</span>] + c * xyz[:,<span class="number">2</span>]) / xc)**<span class="number">2</span> + (xyz[:,<span class="number">1</span>] / yc)**<span class="number">2</span> )**(<span class="number">0.5</span>)</span><br><span class="line">        am = ( ((xyz[:,<span class="number">0</span>] - c * xyz[:,<span class="number">2</span>]) / xc)**<span class="number">2</span> + (xyz[:,<span class="number">1</span>] / yc)**<span class="number">2</span> )**(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> (densityNorm / numpy.cosh(a**m) * numpy.exp( -(r/outerCutoffRadius)**<span class="number">2</span>) *</span><br><span class="line">            (<span class="number">1</span> + alpha * (numpy.exp(-ap**n) + numpy.exp(-am**n) ) ) )</span><br><span class="line"><span class="keyword">return</span> agama.Density(density)</span><br></pre></td></tr></table></figure>

<p>and the component of $\rho_{bar,2}$ and the $\rho_{bar,3}$(which follow the same equation but different parameter):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeLongBar</span>(<span class="params">**params</span>):</span><br><span class="line">    densityNorm = params[<span class="string">&#x27;densityNorm&#x27;</span>]</span><br><span class="line">    x0   = params[<span class="string">&#x27;x0&#x27;</span>]</span><br><span class="line">    y0   = params[<span class="string">&#x27;y0&#x27;</span>]</span><br><span class="line">    cpar = params[<span class="string">&#x27;cpar&#x27;</span>]</span><br><span class="line">    cperp= params[<span class="string">&#x27;cperp&#x27;</span>]</span><br><span class="line">    scaleHeight = params[<span class="string">&#x27;scaleHeight&#x27;</span>]</span><br><span class="line">    innerCutoffRadius   = params[<span class="string">&#x27;innerCutoffRadius&#x27;</span>]</span><br><span class="line">    outerCutoffRadius   = params[<span class="string">&#x27;outerCutoffRadius&#x27;</span>]</span><br><span class="line">    innerCutoffStrength = params[<span class="string">&#x27;innerCutoffStrength&#x27;</span>]</span><br><span class="line">    outerCutoffStrength = params[<span class="string">&#x27;outerCutoffStrength&#x27;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">density</span>(<span class="params">xyz</span>):</span><br><span class="line">        R = (xyz[:,<span class="number">0</span>]**<span class="number">2</span> + xyz[:,<span class="number">1</span>]**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">        a = ( (<span class="built_in">abs</span>(xyz[:,<span class="number">0</span>]) / x0)**cperp + (<span class="built_in">abs</span>(xyz[:,<span class="number">1</span>]) / y0)**cperp )**(<span class="number">1</span>/cperp)</span><br><span class="line">        <span class="keyword">return</span> densityNorm / numpy.cosh(xyz[:,<span class="number">2</span>] / scaleHeight)**<span class="number">2</span> * numpy.exp(-a**cpar</span><br><span class="line">            -(R/outerCutoffRadius)**outerCutoffStrength - (innerCutoffRadius/R)**innerCutoffStrength)</span><br><span class="line">    <span class="keyword">return</span> agama.Density(density)</span><br></pre></td></tr></table></figure>

<p>and we also consider the additional central mass concentration as described in sec.7.3 of <a href="https://arxiv.org/pdf/1608.07954.pdf">Portail et al.(2017)</a>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeCMC</span>(<span class="params">mass, scaleRadius, scaleHeight, axisRatioY</span>):</span><br><span class="line">    norm = mass / (<span class="number">4</span> * numpy.pi * scaleRadius**<span class="number">2</span> * scaleHeight * axisRatioY)</span><br><span class="line">    <span class="keyword">return</span> agama.Density(<span class="keyword">lambda</span> xyz:</span><br><span class="line">        norm * numpy.exp(-(xyz[:,<span class="number">0</span>]**<span class="number">2</span> + (xyz[:,<span class="number">1</span>]/axisRatioY)**<span class="number">2</span>)**<span class="number">0.5</span> / scaleRadius</span><br><span class="line">            - <span class="built_in">abs</span>(xyz[:,<span class="number">2</span>]) / scaleHeight) )</span><br></pre></td></tr></table></figure>

<p>and then we combine the bar part together and get the potential model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeDensityModel_disk</span>(<span class="params">params</span>):</span><br><span class="line">    ind = <span class="number">0</span></span><br><span class="line">    densityDisk = makeDisk(</span><br><span class="line">        surfaceDensity=params[ind+<span class="number">0</span>],</span><br><span class="line">        scaleRadius=params[ind+<span class="number">1</span>],</span><br><span class="line">        innerCutoffRadius=params[ind+<span class="number">2</span>],</span><br><span class="line">        scaleHeight=params[ind+<span class="number">3</span>],</span><br><span class="line">        sersicIndex=params[ind+<span class="number">4</span>],</span><br><span class="line">        verticalSersicIndex=params[ind+<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">return</span> agama.Density(densityDisk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeDensityModel_nodisk</span>(<span class="params">params</span>):</span><br><span class="line">    ind=<span class="number">6</span></span><br><span class="line">    densityXBar = makeXBar(</span><br><span class="line">         densityNorm=params[ind+<span class="number">0</span>],</span><br><span class="line">         x0=params[ind+<span class="number">1</span>],</span><br><span class="line">         y0=params[ind+<span class="number">2</span>],</span><br><span class="line">         z0=params[ind+<span class="number">3</span>],</span><br><span class="line">         cpar=params[ind+<span class="number">4</span>],</span><br><span class="line">         cperp=params[ind+<span class="number">5</span>],</span><br><span class="line">         m=params[ind+<span class="number">6</span>],</span><br><span class="line">         outerCutoffRadius=params[ind+<span class="number">7</span>],</span><br><span class="line">         alpha=params[ind+<span class="number">8</span>],</span><br><span class="line">         c=params[ind+<span class="number">9</span>],</span><br><span class="line">         n=params[ind+<span class="number">10</span>],</span><br><span class="line">         xc=params[ind+<span class="number">11</span>],</span><br><span class="line">         yc=params[ind+<span class="number">12</span>])</span><br><span class="line">    ind+=<span class="number">13</span></span><br><span class="line">    densityLongBar1 = makeLongBar(</span><br><span class="line">        densityNorm=params[ind+<span class="number">0</span>],</span><br><span class="line">        x0=params[ind+<span class="number">1</span>],</span><br><span class="line">        y0=params[ind+<span class="number">2</span>],</span><br><span class="line">        scaleHeight=params[ind+<span class="number">3</span>],</span><br><span class="line">        cperp=params[ind+<span class="number">4</span>],</span><br><span class="line">        cpar=params[ind+<span class="number">5</span>],</span><br><span class="line">        outerCutoffRadius=params[ind+<span class="number">6</span>],</span><br><span class="line">        innerCutoffRadius=params[ind+<span class="number">7</span>],</span><br><span class="line">        outerCutoffStrength=params[ind+<span class="number">8</span>],</span><br><span class="line">        innerCutoffStrength=params[ind+<span class="number">9</span>] )</span><br><span class="line">    ind+=<span class="number">10</span></span><br><span class="line">    densityLongBar2 = makeLongBar(</span><br><span class="line">        densityNorm=params[ind+<span class="number">0</span>],</span><br><span class="line">        x0=params[ind+<span class="number">1</span>],</span><br><span class="line">        y0=params[ind+<span class="number">2</span>],</span><br><span class="line">        scaleHeight=params[ind+<span class="number">3</span>],</span><br><span class="line">        cperp=params[ind+<span class="number">4</span>],</span><br><span class="line">        cpar=params[ind+<span class="number">5</span>],</span><br><span class="line">        outerCutoffRadius=params[ind+<span class="number">6</span>],</span><br><span class="line">        innerCutoffRadius=params[ind+<span class="number">7</span>],</span><br><span class="line">        outerCutoffStrength=params[ind+<span class="number">8</span>],</span><br><span class="line">        innerCutoffStrength=params[ind+<span class="number">9</span>] )</span><br><span class="line">    ind+=<span class="number">10</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(params)==ind, <span class="string">&#x27;invalid number of parameters&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> agama.Density(densityXBar, densityLongBar1, densityLongBar2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makePotentialModel</span>(<span class="params">params</span>):</span><br><span class="line">    <span class="comment"># combined 4 components and the CMC represented by a single triaxial CylSpline potential</span></span><br><span class="line">    mmax = <span class="number">12</span>  <span class="comment"># order of azimuthal Fourier expansion (higher order means better accuracy,</span></span><br><span class="line">    <span class="comment"># but values greater than 12 *significantly* slow down the computation!)</span></span><br><span class="line">    pot_bar = agama.Potential( <span class="built_in">type</span>=<span class="string">&#x27;CylSpline&#x27;</span>,</span><br><span class="line">        density=agama.Density(makeDensityModel_nodisk(params), makeCMC(<span class="number">0.2e10</span>, <span class="number">0.25</span>, <span class="number">0.05</span>, <span class="number">0.5</span>)), symmetry=<span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">        mmax=mmax, gridsizeR=<span class="number">25</span>, gridsizez=<span class="number">25</span>, Rmin=<span class="number">0.1</span>, Rmax=<span class="number">40</span>, zmin=<span class="number">0.05</span>, zmax=<span class="number">20</span>)</span><br><span class="line">    pot_disk = agama.Potential( <span class="built_in">type</span>=<span class="string">&#x27;CylSpline&#x27;</span>,</span><br><span class="line">        density=agama.Density(makeDensityModel_disk(params)),</span><br><span class="line">        symmetry=<span class="string">&#x27;t&#x27;</span>, mmax=mmax, gridsizeR=<span class="number">25</span>, gridsizez=<span class="number">25</span>, Rmin=<span class="number">0.1</span>, Rmax=<span class="number">40</span>, zmin=<span class="number">0.05</span>, zmax=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># flattened axisymmetric dark halo with the Einasto profile</span></span><br><span class="line">    pot_dark = agama.Potential( <span class="built_in">type</span>=<span class="string">&#x27;Multipole&#x27;</span>,</span><br><span class="line">        density=<span class="string">&#x27;Spheroid&#x27;</span>, axisratioz=<span class="number">0.8</span>, gamma=<span class="number">0</span>, beta=<span class="number">0</span>,</span><br><span class="line">        outerCutoffRadius=<span class="number">1.84</span>, cutoffStrength=<span class="number">0.74</span>, densityNorm=<span class="number">0.0263e10</span>,</span><br><span class="line">        gridsizer=<span class="number">26</span>, rmin=<span class="number">0.01</span>, rmax=<span class="number">1000</span>, lmax=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> agama.Potential(pot_bar,pot_disk, pot_dark)</span><br></pre></td></tr></table></figure>

<p>we use the parameters in the fitting of the N-body simulation in the <a href="https://arxiv.org/pdf/2204.13114.pdf">Sormani et al.(2022)</a>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = numpy.array(</span><br><span class="line">  <span class="comment"># disk</span></span><br><span class="line">  [ <span class="number">1.03063359e+09</span>, <span class="number">4.75409497e+00</span>, <span class="number">4.68804907e+00</span>, <span class="number">1.51100601e-01</span>,</span><br><span class="line">    <span class="number">1.53608780e+00</span>, <span class="number">7.15915848e-01</span> ] +</span><br><span class="line">  <span class="comment"># short/thick bar</span></span><br><span class="line">  [ <span class="number">3.16273226e+09</span>, <span class="number">4.90209137e-01</span>, <span class="number">3.92017253e-01</span>, <span class="number">2.29482096e-01</span>,</span><br><span class="line">    <span class="number">1.99110223e+00</span>, <span class="number">2.23179266e+00</span>, <span class="number">8.73227940e-01</span>, <span class="number">4.36983774e+00</span>,</span><br><span class="line">    <span class="number">6.25670015e-01</span>, <span class="number">1.34152138e+00</span>, <span class="number">1.94025114e+00</span>, <span class="number">7.50504078e-01</span>,</span><br><span class="line">    <span class="number">4.68875471e-01</span>] +</span><br><span class="line">  <span class="comment"># long bar 1</span></span><br><span class="line">  [ <span class="number">4.95381575e+08</span>, <span class="number">5.36363324e+00</span>, <span class="number">9.58522229e-01</span>, <span class="number">6.10542494e-01</span>,</span><br><span class="line">    <span class="number">9.69645220e-01</span>, <span class="number">3.05125124e+00</span>, <span class="number">3.19043585e+00</span>, <span class="number">5.58255674e-01</span>,</span><br><span class="line">    <span class="number">1.67310332e+01</span>, <span class="number">3.19575493e+00</span>] +</span><br><span class="line">  <span class="comment"># long bar 2</span></span><br><span class="line">  [ <span class="number">1.74304936e+13</span>, <span class="number">4.77961423e-01</span>, <span class="number">2.66853061e-01</span>, <span class="number">2.51516920e-01</span>,</span><br><span class="line">    <span class="number">1.87882599e+00</span>, <span class="number">9.80136710e-01</span>, <span class="number">2.20415408e+00</span>, <span class="number">7.60708626e+00</span>,</span><br><span class="line">   -<span class="number">2.72907665e+01</span>, <span class="number">1.62966434e+00</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>and we get the Potential model of the Milky Way and we can start our simulation now(the nf package just some fundamental function in this simulation):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pot = makePotentialModel(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(<span class="string">&#x27;perturbation&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dictionary exist!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">roted = <span class="string">&quot;perturbation/rot1&quot;</span></span><br><span class="line">scaled = <span class="string">&quot;perturbation/scale1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#scale part</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="comment"># a = 0.5</span></span><br><span class="line">    <span class="comment"># b = 0.001</span></span><br><span class="line">    <span class="keyword">if</span> t &lt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="number">1.5</span>/<span class="number">6</span>*t</span><br><span class="line">    <span class="comment"># elif t &lt;= 1:</span></span><br><span class="line">    <span class="comment">#     return numpy.exp(-a/(t-0.25))</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return numpy.exp(-a/(1-0.25)) - numpy.exp(-b/(t-1))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rotation part</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">O</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">if</span> t &lt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">88</span>+t*(<span class="number">88</span>-<span class="number">35</span>)/<span class="number">6</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">35</span></span><br><span class="line">tt = numpy.linspace(<span class="number">0</span>, <span class="number">8</span>, <span class="number">500</span>)</span><br><span class="line">numpy.savetxt(roted,numpy.column_stack((tt,numpy.array([O(t) <span class="keyword">for</span> t <span class="keyword">in</span> tt]))))</span><br><span class="line">numpy.savetxt(scaled,numpy.column_stack((tt,numpy.array([A(t) <span class="keyword">for</span> t <span class="keyword">in</span> tt]),numpy.ones(numpy.shape(tt)))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pot_MW = agama.Potential(</span><br><span class="line">    agama.Potential(potential=pot[<span class="number">0</span>],rotation=roted,scale=scaled),</span><br><span class="line">    pot[<span class="number">1</span>],pot[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># the distribution function including the bar</span></span><br><span class="line">pot_axi = agama.Potential(</span><br><span class="line">    agama.Potential(<span class="built_in">type</span>=<span class="string">&#x27;CylSpline&#x27;</span>, potential=pot[<span class="number">0</span>],</span><br><span class="line">        mmax=<span class="number">12</span>, gridsizeR=<span class="number">25</span>, gridsizez=<span class="number">25</span>, Rmin=<span class="number">0.1</span>, Rmax=<span class="number">40</span>, zmin=<span class="number">0.05</span>, zmax=<span class="number">20</span>),</span><br><span class="line">    agama.Potential(<span class="built_in">type</span>=<span class="string">&#x27;CylSpline&#x27;</span>, potential=pot[<span class="number">1</span>],</span><br><span class="line">        mmax=<span class="number">12</span>, gridsizeR=<span class="number">25</span>, gridsizez=<span class="number">25</span>, Rmin=<span class="number">0.1</span>, Rmax=<span class="number">40</span>, zmin=<span class="number">0.05</span>, zmax=<span class="number">20</span>),pot[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># the distribution function not including the bar</span></span><br><span class="line"><span class="comment"># pot_axi = agama.Potential(</span></span><br><span class="line"><span class="comment">#     agama.Potential(type=&#x27;CylSpline&#x27;, potential=pot[1],</span></span><br><span class="line"><span class="comment">#         mmax=0, gridsizeR=25, gridsizez=25, Rmin=0.1, Rmax=40, zmin=0.05, zmax=20),pot[2])</span></span><br><span class="line"></span><br><span class="line">os.remove(roted)</span><br><span class="line">os.remove(scaled)</span><br><span class="line">os.removedirs(<span class="string">&#x27;perturbation&#x27;</span>)</span><br><span class="line">pot_per = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the potential:&#x27;</span>,pot_MW)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;generate the distribution with the number of the particle&#x27;</span>)</span><br><span class="line">sigmaz = <span class="number">0</span></span><br><span class="line">sigmavz = <span class="number">0</span></span><br><span class="line">num_par = <span class="number">800000</span></span><br><span class="line">initcond =  nf.init_distribution(pot_axi,numpy.random.normal(<span class="number">0</span>,sigmavz,size=num_par),numpy.random.normal(<span class="number">0</span>,sigmaz,size=num_par),num_par)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;start the simulation&#x27;</span>)</span><br><span class="line"><span class="keyword">global</span> orbs</span><br><span class="line">orbs = nf.simulation(pot_MW=pot_MW,pot_per=pot_per,initcond=initcond,num_par=num_par,time=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sart to plot the figure into movie&#x27;</span>)</span><br><span class="line"></span><br><span class="line">name = time.strftime(<span class="string">&quot;%Y-%m-%d_%Hh%Mmin&quot;</span>,time.localtime())</span><br><span class="line">dirname = time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>,time.localtime())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">&#x27;results/&#x27;</span>+dirname)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;results/&#x27;</span>+dirname+<span class="string">&#x27; has existed!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;start to save the data&#x27;</span>)</span><br><span class="line">r = numpy.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">200</span>)</span><br><span class="line">xyz = numpy.column_stack((r, r*<span class="number">0</span>, r*<span class="number">0</span>))</span><br><span class="line">vcirc = numpy.sqrt(-r*pot_MW.force(xyz)[:,<span class="number">0</span>])</span><br><span class="line">lz = r*vcirc   <span class="comment"># (r, lz) mapping constructed</span></span><br><span class="line">numpy.save(<span class="string">&#x27;results/&#x27;</span>+dirname+<span class="string">&#x27;/&#x27;</span>+name,orbs)</span><br><span class="line"><span class="comment"># np.save(&#x27;results/&#x27;+dirname+&#x27;/&#x27;+name+&#x27;_lz&#x27;,lz)</span></span><br><span class="line">gc.collect() </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;drawing the movie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawpic</span>(<span class="params">orbs,t,x0,vx0,z0,vz0,tmiddle=<span class="number">0</span></span>):</span><br><span class="line">    <span class="comment">#set the figure</span></span><br><span class="line">    fig,ax = plt.subplots(<span class="number">3</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">12</span>))</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&#x27;z(kpc)&#x27;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">&#x27;x(kpc)&#x27;</span>,fontsize=<span class="number">10</span>,labelpad=-<span class="number">35</span>)</span><br><span class="line">    ax1.set_title(<span class="string">&#x27;Time:&#x27;</span>+<span class="built_in">str</span>(<span class="number">40</span>*t)+<span class="string">&#x27;Myr&#x27;</span>,fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">&#x27;y(kpc)&#x27;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    ax2.set_xlabel(<span class="string">&#x27;x(kpc)&#x27;</span>,fontsize=<span class="number">10</span>,labelpad=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    ax3.set_ylabel(<span class="string">&#x27;z(kpc)&#x27;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">    ax3.set_xlabel(<span class="string">&#x27;y(kpc)&#x27;</span>,fontsize=<span class="number">10</span>,labelpad=-<span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">0</span>].set_xticks([])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">0</span>].set_yticks([])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">2</span>].set_xticks([])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">2</span>].set_yticks([])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">1</span>].set_yticks([])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">1</span>].set_xticks([])</span><br><span class="line"></span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].set_xticklabels([])</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].set_ylabel(<span class="string">&#x27;$V_z$(km/s)&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">1</span>].set_yticklabels([])</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">1</span>].set_xticklabels([])</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">2</span>].set_yticklabels([])</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">2</span>].set_xticklabels([])</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">0</span>].set_ylabel(<span class="string">&#x27;$V_z$(km/s)&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">0</span>].set_xlabel(<span class="string">&#x27;z(kpc)&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">1</span>].set_yticklabels([])</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">1</span>].set_xlabel(<span class="string">&#x27;z(kpc)&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">2</span>].set_yticklabels([])</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">2</span>].set_xlabel(<span class="string">&#x27;z(kpc)&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    <span class="comment"># the z-Vz space(with the 6 small figure)</span></span><br><span class="line">    radval = numpy.array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">    snap = orbs[:,t,:]</span><br><span class="line">    r = numpy.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">200</span>)</span><br><span class="line">    lz = <span class="number">20</span>*numpy.ones(numpy.shape(r))</span><br><span class="line">    xyz = numpy.column_stack((r, r*<span class="number">0</span>, r*<span class="number">0</span>))</span><br><span class="line">    vcirc = <span class="number">230</span></span><br><span class="line">    lz = r*vcirc   <span class="comment"># (r, lz) mapping constructed</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the Rg of all the test partilces</span></span><br><span class="line">    angl = numpy.arctan2(snap[:,<span class="number">1</span>], snap[:,<span class="number">0</span>])</span><br><span class="line">    vphi = -snap[:,<span class="number">3</span>]*numpy.sin(angl) + snap[:,<span class="number">4</span>]*numpy.cos(angl)</span><br><span class="line">    lzval = numpy.sqrt(snap[:,<span class="number">0</span>]**<span class="number">2</span> + snap[:,<span class="number">1</span>]**<span class="number">2</span>) * vphi</span><br><span class="line">    rg = numpy.interp(lzval, lz, r)</span><br><span class="line">    <span class="comment"># plot the data with the given Rg range    num_par = 2000000</span></span><br><span class="line">    <span class="keyword">for</span> idx, rad <span class="keyword">in</span> <span class="built_in">enumerate</span>(radval):</span><br><span class="line">        irow = <span class="built_in">int</span>(idx/<span class="number">3</span>)</span><br><span class="line">        icol = numpy.mod(idx, <span class="number">3</span>)</span><br><span class="line">        i_par = numpy.where(numpy.<span class="built_in">abs</span>(rg - rad)&lt;=<span class="number">0.2</span>)</span><br><span class="line">        </span><br><span class="line">        ax[irow+<span class="number">1</span>, icol].hist2d(snap[i_par,<span class="number">2</span>][<span class="number">0</span>,:], snap[i_par,<span class="number">5</span>][<span class="number">0</span>,:], bins=<span class="number">100</span>, </span><br><span class="line">                            <span class="built_in">range</span>=[[-<span class="number">3</span>,<span class="number">3</span>],[-<span class="number">150</span>,<span class="number">150</span>]],norm=colors.LogNorm(vmin=<span class="number">1</span>,vmax=<span class="number">100</span>), </span><br><span class="line">                            cmap=<span class="string">&#x27;YlOrBr&#x27;</span>, cmin=<span class="number">1</span>)</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=5$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">1</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=6$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">2</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=7$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">0</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=8$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">1</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=9$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line">    ax[<span class="number">2</span>,<span class="number">2</span>].annotate(<span class="string">&#x27;$R_&#123;g&#125;=10$ kpc&#x27;</span>, xy=(-<span class="number">2</span>,<span class="number">90</span>))</span><br><span class="line"></span><br><span class="line">    ax1.hist2d(snap[:,<span class="number">0</span>],snap[:,<span class="number">2</span>],bins=<span class="number">500</span>,<span class="built_in">range</span>=[[-<span class="number">25</span>,<span class="number">25</span>],[-<span class="number">5</span>,<span class="number">5</span>]],norm=colors.LogNorm(vmin=<span class="number">1</span>,vmax=<span class="number">1000</span>),cmap=<span class="string">&#x27;YlOrBr&#x27;</span>, cmin=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ax2.hist2d(snap[:,<span class="number">0</span>],snap[:,<span class="number">1</span>],bins=<span class="number">500</span>,<span class="built_in">range</span>=[[-<span class="number">15</span>,<span class="number">15</span>],[-<span class="number">15</span>,<span class="number">15</span>]],norm=colors.LogNorm(vmin=<span class="number">1</span>,vmax=<span class="number">1000</span>),cmap=<span class="string">&#x27;YlOrBr&#x27;</span>, cmin=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ax3.hist2d(snap[:,<span class="number">1</span>],snap[:,<span class="number">2</span>],bins=<span class="number">500</span>,<span class="built_in">range</span>=[[-<span class="number">25</span>,<span class="number">25</span>],[-<span class="number">5</span>,<span class="number">5</span>]],norm=colors.LogNorm(vmin=<span class="number">1</span>,vmax=<span class="number">1000</span>),cmap=<span class="string">&#x27;YlOrBr&#x27;</span>, cmin=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x0) == <span class="number">1</span>:</span><br><span class="line">        ax1.scatter(numpy.array(x0)+numpy.array(vx0)*t/<span class="number">200</span>,numpy.array(z0)+numpy.array(vz0)*t/<span class="number">200</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x0) == <span class="number">2</span>:</span><br><span class="line">        ax1.scatter(x0[<span class="number">0</span>]+vx0[<span class="number">0</span>]*t/<span class="number">200</span>,z0[<span class="number">0</span>]+vz0[<span class="number">0</span>]*t/<span class="number">200</span>,<span class="number">5</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">        ax1.scatter(x0[<span class="number">1</span>]+vx0[<span class="number">1</span>]*(t-tmiddle)/<span class="number">200</span>,z0[<span class="number">1</span>]+vz0[<span class="number">1</span>]*(t-tmiddle)/<span class="number">200</span>,<span class="number">5</span>,<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    plt.close(<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line">    gc.collect()</span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line">img_array = []</span><br><span class="line">x,z = [<span class="number">0</span>],[<span class="number">1200</span>]</span><br><span class="line">vx,vz = [<span class="number">0</span>],[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    fig = drawpic(orbs,t,x,vx,z,vz,<span class="number">0</span>)</span><br><span class="line">    im = nf.fig2data(fig)</span><br><span class="line">    img_array.append(im)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r%d/200&quot;</span>%(t),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">imageio.mimsave(<span class="string">&#x27;results/&#x27;</span>+dirname+<span class="string">&#x27;/&#x27;</span>+name+<span class="string">&#x27;.mp4&#x27;</span>,img_array,<span class="string">&#x27;mp4&#x27;</span>,fps=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">del</span> img_array</span><br><span class="line"><span class="keyword">del</span> im</span><br><span class="line">gc.collect()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;end!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>after the simulation We can get .npy and .mp4 files</p>
<h2 id="The-results-of-the-simulation"><a href="#The-results-of-the-simulation" class="headerlink" title="The results of the simulation"></a>The results of the simulation</h2><p>In this part, I will show different situations of the perturbation generated by the time-varying parameters of the bar.</p>
<h3 id="the-scale-of-the-potential-changing-with-the-time"><a href="#the-scale-of-the-potential-changing-with-the-time" class="headerlink" title="the scale of the potential changing with the time"></a>the scale of the potential changing with the time</h3><p>just set the scale of the bar potential(change of the mass) like the function of $e^{-a&#x2F;t}$,  </p>
<p>there are several situation of the value of a:</p>
<p>a&#x3D;0.5:</p>
<p><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230628165718.png"  width="50%" height="50%"/><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/a5.gif" width="100%" height="100%"/></p>
<p>a&#x3D;0.01:</p>
<p><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230628165958.png" width="50%" height="50%"/><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/a01.gif" width="100%" height="100%"/></p>
<p>a&#x3D;0.001:</p>
<p><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230628170252.png" width="50%" height="50%"/><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/a001.gif" width="100%" height="100%"/></p>
<p>the results show that if the bar was generated in a short time, it will produce a wave in x-y plane. and we also can view the double-arm spiral in the $z-V_{z}$ space, and it is a good assumption of the reason of the double-arm spiral in the inner disc and single-arm spiral in the outer.</p>
<h3 id="the-pattern-speed-of-the-bar-decreasing"><a href="#the-pattern-speed-of-the-bar-decreasing" class="headerlink" title="the pattern speed of the bar decreasing"></a>the pattern speed of the bar decreasing</h3><p>When $t\leq500$Gyr, the pattern speed stay the constant, and when $t&gt;500$Gyr the parttern speed satart deacreasing with the time linearly<br><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/deacreasing_partternspeed.gif"/></p>
<p>In <a href="https://arxiv.org/pdf/2303.06393.pdf">Li.C et al.(2023)</a>‘s case, the deacreasing of the pattern speed will cause the double-arm spiral in $z-v_{z}$ phase space in the inner disc. In my case, However, we can see the upper video, the result is not happen.</p>
<p>To be fair, I check the paper and follow the process of the simulation in the paper:</p>
<ul>
<li>The pattern speed is -88 km&#x2F;s&#x2F;kpc at 0Gyr, and decreasing to -35 km&#x2F;s&#x2F;kpc at 6Gyr.</li>
<li>The mass is multipled by a factor: 2.5, and the radial profile is multipled by a factor: 1.5</li>
</ul>
<p>and the movie I get:<br><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/simulation_com.gif"/></p>
<p>I notice that the verticle lenth of the $z-v_{z}$ phase space in the inner disc, Howerver, the doubled-arm spiral is not appear in this simulation, different from the <a href="https://arxiv.org/pdf/2303.06393.pdf">Li.C et al.(2023)</a> </p>
<h3 id="v-r-color-code-in-the-simulation"><a href="#v-r-color-code-in-the-simulation" class="headerlink" title="$v_r$ color code in the simulation"></a>$v_r$ color code in the simulation</h3><p>using some typically situation to do the simulation but show the results in the $v_r$ color code:</p>
<p>the mass rapidly changes:</p>
<!-- (2023-06-23_04h50min_vr.gif) -->

<img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-06-23_04h50min_vr.gif"/>]]></content>
      <categories>
        <category>science report</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>simulation</tag>
        <tag>theory</tag>
      </tags>
  </entry>
  <entry>
    <title>template</title>
    <url>/2023/06/27/hello-world/</url>
    <content><![CDATA[<p>this is the abstract of this article</p>
<p>click read more to show all the text</p>
<span id="more"></span>

<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>observation data finding</title>
    <url>/2023/09/02/observation-data-finding/</url>
    <content><![CDATA[<p>some new finding in the Gaia DR3 observation data</p>
<span id="more"></span>

<h1 id="Gaia-Data-sample"><a href="#Gaia-Data-sample" class="headerlink" title="Gaia Data sample"></a>Gaia Data sample</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT source_id, radial_velocity, radial_velocity_error, ra, ra_error, dec, dec_error, parallax, parallax_error, pmra, pmra_error, pmdec, pmdec_error</span><br><span class="line"></span><br><span class="line">FROM gaiadr3.gaia_source</span><br><span class="line"></span><br><span class="line">WHERE radial_velocity IS NOT Null AND parallax_over_error&gt;5. AND parallax &gt; 0.001</span><br></pre></td></tr></table></figure>

<p>distance: Bailer-Jones distance</p>
<h2 id="z-v-z-phase-space-in-different-J-phi-with-v-r-gt-0-and-v-r-lt-0"><a href="#z-v-z-phase-space-in-different-J-phi-with-v-r-gt-0-and-v-r-lt-0" class="headerlink" title="$z-v_z$ phase space in different $J_{\phi}$ with $v_r&gt;0$ and $v_{r}&lt;0$"></a>$z-v_z$ phase space in different $J_{\phi}$ with $v_r&gt;0$ and $v_{r}&lt;0$</h2><h3 id="1400-lt-J-phi-lt-1500"><a href="#1400-lt-J-phi-lt-1500" class="headerlink" title="$1400&lt;J_{\phi}&lt;1500$:"></a>$1400&lt;J_{\phi}&lt;1500$:</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021520418.png"/>

<h3 id="1500-lt-J-phi-lt-1600-obvious-double-armed-phase-spiral-in-v-r-gt-0"><a href="#1500-lt-J-phi-lt-1600-obvious-double-armed-phase-spiral-in-v-r-gt-0" class="headerlink" title="$1500&lt;J_{\phi}&lt;1600$ (obvious double-armed phase spiral in $v_{r}$&gt;0):"></a>$1500&lt;J_{\phi}&lt;1600$ (obvious double-armed phase spiral in $v_{r}$&gt;0):</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021521003.png"/>

<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021532291.png"/>


<h3 id="1600-lt-J-phi-lt-1700"><a href="#1600-lt-J-phi-lt-1700" class="headerlink" title="$1600&lt;J_{\phi}&lt;1700$"></a>$1600&lt;J_{\phi}&lt;1700$</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021522665.png"/>

<h3 id="1700-lt-J-phi-lt-1800"><a href="#1700-lt-J-phi-lt-1800" class="headerlink" title="$1700&lt;J_{\phi}&lt;1800$"></a>$1700&lt;J_{\phi}&lt;1800$</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021522400.png"/>

<h3 id="1800-lt-J-phi-lt-1900"><a href="#1800-lt-J-phi-lt-1900" class="headerlink" title="$1800&lt;J_{\phi}&lt;1900$"></a>$1800&lt;J_{\phi}&lt;1900$</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021523829.png"/>

<h3 id="1900-lt-J-phi-lt-2000"><a href="#1900-lt-J-phi-lt-2000" class="headerlink" title="$1900&lt;J_{\phi}&lt;2000$"></a>$1900&lt;J_{\phi}&lt;2000$</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021523294.png"/>

<h2 id="further-analysis-of-the-2-armed-spiral"><a href="#further-analysis-of-the-2-armed-spiral" class="headerlink" title="further analysis of the 2-armed spiral"></a>further analysis of the 2-armed spiral</h2><p>for $1500&lt;J_{\phi}&lt;1600$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309021543516.png"/>

<p>it is a quite clear 2-armed phase spiral in the $v_r&gt;0$ </p>
<h3 id="color-coded-by-v-phi"><a href="#color-coded-by-v-phi" class="headerlink" title="color-coded by $v_{\phi}$"></a>color-coded by $v_{\phi}$</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309031737187.png"/>

<p>even can not tell a spiral in this picture. just a high density area in the center.</p>
<h3 id="trace-the-2-armed-spiral-to-estimate-the-perturbation-time"><a href="#trace-the-2-armed-spiral-to-estimate-the-perturbation-time" class="headerlink" title="trace the 2-armed spiral to estimate the perturbation time"></a>trace the 2-armed spiral to estimate the perturbation time</h3><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309022312030.png"/>
compare to the another 2-armed phase spiral given by the Hunt 2023:

<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309022310567.png"/>

<h3 id="different-plane-analysis"><a href="#different-plane-analysis" class="headerlink" title="different plane analysis"></a>different plane analysis</h3><p>x-y plane($&lt;v_{z}&gt;$ color-code)</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309031928274.png"/>

<p>I can not notice any useful structure to illustrate the difference of this two pictures.</p>
<p>x-y plane($v_{breath}$ and $v_{bend}$)</p>
<p>$$<br>    v_{breath} &#x3D; \frac{v_{z&gt;0,mean}-v_{z&lt;0,mean}}{2}<br>$$</p>
<p>$$<br>    v_{bend} &#x3D; \frac{v_{z&gt;0,mean}+v_{z&lt;0,mean}}{2}<br>$$</p>
<p>$v_{breath}$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309031909055.png"/>

<p>$v_{bend}$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309031909169.png"/>




<p>R-z plane($v_{z}$ color-code):</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202309031723851.png"/>

<p>this R-z plane shows the features of the breathing mode.</p>
]]></content>
      <tags>
        <tag>for paper</tag>
      </tags>
  </entry>
  <entry>
    <title>progress report</title>
    <url>/2023/07/22/progress-report/</url>
    <content><![CDATA[<p>latest update in 2023.07.22</p>
<span id="more"></span>

<h1 id="Introduction-of-the-potential"><a href="#Introduction-of-the-potential" class="headerlink" title="Introduction of the potential"></a>Introduction of the potential</h1><p>We use the bar potential follow the <a href="https://arxiv.org/pdf/2204.13114.pdf">Sormani et al.(2022)</a></p>
<p>the potential is made of four component:</p>
<p>$$<br>    \rho &#x3D; \rho_{bar,1} + \rho_{bar,2} + \rho_{bar,3} + \rho_{disc}<br>$$</p>
<p>the $\rho_{bar,1}$ and $\rho_{bar,2}$ is the center of the bar like a bulge but in a peanut shape. and the $\rho_{bar,3}$ is the long bar part, just like a ear to the bar, and the last one is the disc part. Here shows the picture for those components.</p>
<!-- ![the main four component of the potential](https://s2.loli.net/2023/06/28/5I6cqf2kmndpTwg.png) -->

<img src="https://s2.loli.net/2023/06/28/5I6cqf2kmndpTwg.png" width="75%"/>

<h1 id="The-setup-of-the-potential-and-the-results-from-the-test-particle-simulation"><a href="#The-setup-of-the-potential-and-the-results-from-the-test-particle-simulation" class="headerlink" title="The setup of the potential and the results from the test-particle simulation"></a>The setup of the potential and the results from the test-particle simulation</h1><p>In this section, I will introduce what kind of the potential is set, including the potential of the bar, spiral, and the particle(inner perturbation and the outer perturbation)</p>
<h2 id="The-bar-shows-up-in-a-sudden-way-not-reality"><a href="#The-bar-shows-up-in-a-sudden-way-not-reality" class="headerlink" title="The bar shows up in a sudden way(not reality)"></a>The bar shows up in a sudden way(not reality)</h2><p>if the bar mass is growing in a rapid way, following the function below:</p>
<!-- <div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230720152522.png" width="25%" height="25%"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230720152522.png" width="25%" height="25%"/></div></div></div> -->

<img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230720152522.png" width="30%"/>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/a01.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-06-23_04h50min_vr.gif"/></div></div></div>

<h2 id="The-bar-shows-up-in-a-smooth-way"><a href="#The-bar-shows-up-in-a-smooth-way" class="headerlink" title="The bar shows up in a smooth way"></a>The bar shows up in a smooth way</h2><p>the amplitude change follow the equation:<br>$$<br>    A(t) &#x3D; \frac{3}{16}\xi^{5}-\frac{5}{8}\xi^{3}+\frac{15}{16}\xi+\frac{1}{2}<br>$$<br>where</p>
<p>$$<br>    \xi&#x3D;2(\frac{t-t_{form}}{t_{steady}}-1)   \quad t_{form}\leq t \leq t_{form}+t_{steady}<br>$$<br><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/20230720160810.png" width="30%"/></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_13h43min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_13h43min.gif"/></div></div></div>

<h3 id="particle-pass-through-the-disk-with-a-bar"><a href="#particle-pass-through-the-disk-with-a-bar" class="headerlink" title="particle pass through the disk with a bar"></a>particle pass through the disk with a bar</h3><p>the particle’s initial parameters:</p>
<ul>
<li>mass&#x3D;$1 \times 10^{10} M_{\odot}$</li>
<li>$x&#x3D;8kpc, y&#x3D;0kpc, z&#x3D;300kpc$</li>
<li>$v_x&#x3D;0km&#x2F;s, v_y&#x3D;0 km&#x2F;s, v_z&#x3D;-300km&#x2F;s$</li>
</ul>
<p>after the bar’s formation($t_{form}&#x3D;0.25Gyr,t_{steady}&#x3D;0.75Gyr$):</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_18h15min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_18h15min.gif"/></div></div></div>

<p>what if a higher speed of the particle($v_z&#x3D;-1000km&#x2F;s$)?</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_21h06min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_21h06min.gif"/></div></div></div>


<h3 id="simulate-a-massive-cloud-rotates-in-a-circular-orbit"><a href="#simulate-a-massive-cloud-rotates-in-a-circular-orbit" class="headerlink" title="simulate a massive cloud rotates in a circular orbit"></a>simulate a massive cloud rotates in a circular orbit</h3><p>the cloud’s initial parameters:(bar formation stays the same)</p>
<ul>
<li>mass&#x3D;$1 \times 10^{9} M_{\odot}$,radius&#x3D;$0.5kpc$</li>
<li>$x&#x3D;5kpc, y&#x3D;0kpc, z&#x3D;0kpc$</li>
<li>$v_r&#x3D;50km&#x2F;s$</li>
</ul>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_19h03min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_19h03min.gif"/></div></div></div>

<p>the larger size radius&#x3D;$1kpc$</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_19h20min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_19h20min.gif"/></div></div></div>

<p>and the slower cloud(radius&#x3D;$1kpc$): $v_r&#x3D;25km&#x2F;s$</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-20_20h25min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/vr_2023-07-20_20h25min.gif"/></div></div></div>

<h3 id="The-pattern-speed-of-the-bar"><a href="#The-pattern-speed-of-the-bar" class="headerlink" title="The pattern speed of the bar"></a>The pattern speed of the bar</h3><p>Changing the pattern speed of the bar:</p>
<p>the function of the pattern speed:</p>
<img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/202307221406261.png" width="30%"/>

<p>and we can get double-armed phase spiral of the $z-v_z$ space:</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/2023-07-21_23h02min.gif"/></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/jxjxxxx/markdownimage/main/vr_2023-07-21_23h02min.gif"/></div></div></div>


]]></content>
      <tags>
        <tag>report</tag>
      </tags>
  </entry>
  <entry>
    <title>progress 2023 08 26</title>
    <url>/2023/08/26/report-2023-08-26/</url>
    <content><![CDATA[<p>progress in 2023 08 26</p>
<span id="more"></span>

<h1 id="simulation-work"><a href="#simulation-work" class="headerlink" title="simulation work"></a>simulation work</h1><ul>
<li>only decreasing pattern speed bar exits in the simulation</li>
<li>only the spiral(no bar) in the simulation</li>
<li>contain both in the simulation</li>
</ul>
<p>If only the bar in the simulation</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/15h58min.gif"/>

<p>only the spiral in the simulation</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/16h45min.gif"/>

<p>contain both in the simulation</p>
<img src="https://media.githubusercontent.com/media/JunxianLin/markdownimage/master/13h40min_zoom.gif"/>


<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>my simulation work shows that the spiral has a huge impact on the $v_{r}$ color code $z-v_z$ space(but this kind of influence doesn’t show in the Li.C’s snapshot of the simulation), and I wonder if there is some problems on the introduce of the spiral in the simulation.</p>
<p>And my simulation shows a different result to the Li.C’s, I wonder if my code have any problem.</p>
<h2 id="my-fixing-of-the-problem"><a href="#my-fixing-of-the-problem" class="headerlink" title="my fixing of the problem"></a>my fixing of the problem</h2><p>I let the bar and spiral show in a gentle way.(undone)</p>
<h1 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h1><p>I did the separate into the $v_{r}$ to the observation data:</p>
<p>the total data:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202308261931919.png"/>

<p>the inner disk<br>$1400&lt;J_{\phi}&lt;1500$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202308261934646.png"/>


<p>$1500&lt;J_{\phi}&lt;1600$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202308261933816.png"/>

<p>$1600&lt;J_{\phi}&lt;1700$:</p>
<img src="https://raw.githubusercontent.com/JunxianLin/markdownimage/main/202308261935194.png"/>]]></content>
      <tags>
        <tag>science report</tag>
      </tags>
  </entry>
</search>
